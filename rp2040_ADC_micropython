from machine import Pin, SPI, ADC
import time
import rp2

# PIO program for continuous SPI
@rp2.asm_pio(out_shiftdir=rp2.PIO.SHIFT_LEFT,
             autopull=True,
             pull_thresh=16,
             in_shiftdir=rp2.PIO.SHIFT_LEFT,
             autopush=True,
             push_thresh=16)
def continuous_spi():
    # Set up for 16-bit transfers
    set(x, 15)
    label("bitloop")
    set(pins, 0)               # SCK Low
    out(pins, 1)    [1]       # Output MOSI and wait
    set(pins, 1)              # SCK High
    in_(pins, 1)    [1]       # Sample MISO and wait
    jmp(x_dec, "bitloop")     # Loop for all 16 bits

class PIOADCReader:
    def __init__(self, sck_pin, mosi_pin, miso_pin, cs_pin, frequency=800000):
        """Initialize ADC reader with PIO-based SPI and internal ADCs."""
        # External ADC channel configurations
        self.channel_configs = {
            0: 0b00000000,
            1: 0b00001000,
            2: 0b00010000,
            3: 0b00011000
        }
        
        # CS pin setup
        self.cs = Pin(cs_pin, Pin.OUT)
        self.cs.value(1)  # CS high (disabled)
        
        # Initialize PIO state machine for SPI
        self.sm = rp2.StateMachine(0, continuous_spi,
                                 freq=frequency * 2,
                                 set_base=Pin(sck_pin),
                                 out_base=Pin(mosi_pin),
                                 in_base=Pin(miso_pin))
        self.sm.active(1)
        
        # Initialize internal ADCs
        # MicroPython uses 0-4 for ADC channels (0-3 are GPIO 26-29, 4 is temp sensor)
        self.internal_adcs = []
        for channel in range(4):  # ADC0-3
            try:
                adc = ADC(channel)
                self.internal_adcs.append(adc)
            except Exception as e:
                print(f"Warning: Failed to initialize internal ADC channel {channel}: {e}")
        
        try:
            self.temp_sensor = ADC(4)  # Internal temperature sensor
        except Exception as e:
            print(f"Warning: Failed to initialize temperature sensor: {e}")
            self.temp_sensor = None
        
        # Pre-start with Ch1 to get correct pipeline order
        self.cs.value(0)
        self.sm.put(self.channel_configs[1] << 8)
        self.cs.value(1)
        time.sleep_us(1)

    def process_value(self, raw):
        """Process raw ADC value into digital value and voltage."""
        value = (raw >> 4) & 0xFF
        digital_value = sum(((value >> i) & 1) << (7-i) for i in range(8))
        voltage = (digital_value / 255.0) * 3.3
        return digital_value, voltage

    def read_external_channels(self):
        """Read all external ADC channels using PIO-based SPI."""
        results = [(0,0.0)] * 4
        channels = [(1,0), (2,1), (3,2), (0,3)]  # (config_channel, result_channel)
        
        for config_ch, result_ch in channels:
            self.cs.value(0)
            next_ch = (config_ch + 1) % 4
            self.sm.put(self.channel_configs[next_ch] << 8)
            raw = self.sm.get()
            self.cs.value(1)
            time.sleep_us(1)
            
            results[result_ch] = self.process_value(raw)
        
        return results

    def read_internal_channel(self, channel):
        """Read value from internal ADC channel."""
        if not 0 <= channel < len(self.internal_adcs):
            raise ValueError(f"Internal channel must be between 0 and {len(self.internal_adcs)-1}")
        
        # MicroPython ADC read() returns values 0-65535
        return self.internal_adcs[channel].read_u16()

    def convert_internal_to_voltage(self, value):
        """Convert internal ADC reading to voltage."""
        return (value / 65535) * 3.3

    def read_temperature(self):
        """Read RP2040 internal temperature sensor."""
        if self.temp_sensor is None:
            return None
            
        try:
            # Temperature sensor conversion for RP2040
            # According to RP2040 datasheet:
            # temp = 27 - (ADC_voltage - 0.706)/0.001721
            adc_value = self.temp_sensor.read_u16()
            voltage = (adc_value / 65535) * 3.3
            temp_c = 27 - (voltage - 0.706) / 0.001721
            temp_f = (temp_c * 9/5) + 32
            return {"celsius": temp_c, "fahrenheit": temp_f}
        except Exception as e:
            print(f"Error reading temperature: {e}")
            return None

    def read_all_channels(self):
        """Read all channels (external and internal) and temperature."""
        readings = {
            'external': self.read_external_channels(),
            'internal': [],
            'temperature': self.read_temperature()
        }
        
        # Read internal channels
        for channel in range(len(self.internal_adcs)):
            try:
                value = self.read_internal_channel(channel)
                voltage = self.convert_internal_to_voltage(value)
                readings['internal'].append((value, voltage))
            except Exception as e:
                print(f"Error reading internal channel {channel}: {e}")
                readings['internal'].append((None, None))
                
        return readings

def format_reading(channel, value_pair, is_internal=False):
    """Format ADC reading for display."""
    if value_pair[0] is None:
        return f"Channel {channel}: ERROR"
    
    if is_internal:
        raw, voltage = value_pair
        return f"Channel {channel}: Raw: 0x{raw:04X}, Decimal: {raw}, Voltage: {voltage:.3f}V"
    else:
        digital_value, voltage = value_pair
        return f"Channel {channel}: Raw: {digital_value}, Voltage: {voltage:.3f}V"

def format_temperature(temp_data):
    """Format temperature reading for display."""
    if temp_data is None:
        return "Temperature: ERROR"
    return f"CPU Temperature: {temp_data['celsius']:.1f}°C / {temp_data['fahrenheit']:.1f}°F"

def main():
    """Main program loop."""
    # Use GPIO numbers directly in MicroPython
    adc = PIOADCReader(
        sck_pin=2,    # GP2
        mosi_pin=3,   # GP3
        miso_pin=4,   # GP4
        cs_pin=5,     # GP5
        frequency=800000
    )
    
    try:
        while True:
            # Read all channels
            readings = adc.read_all_channels()
            
            # Display external readings
            print("\nExternal ADC Readings (3.3V reference):")
            for channel, value_pair in enumerate(readings['external']):
                print(format_reading(channel, value_pair, False))
            
            # Display internal readings
            print("\nInternal ADC Readings (3.3V reference):")
            for channel, value_pair in enumerate(readings['internal']):
                print(format_reading(channel, value_pair, True))
            
            # Display temperature
            print("\nTemperature Reading:")
            print(format_temperature(readings['temperature']))
                
            print("\n" + "-"*50)  # Separator line
            time.sleep(1)
            
    except KeyboardInterrupt:
        print("\nProgram terminated by user")
    finally:
        # Cleanup - disable PIO state machine
        adc.sm.active(0)

if __name__ == "__main__":
    main()
