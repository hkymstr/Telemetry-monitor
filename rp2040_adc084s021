import board
import rp2pio
import adafruit_pioasm
import array
import time
from digitalio import DigitalInOut, Direction

CONTINUOUS_SPI = """
.program continuous_spi
.wrap_target
    set x, 15                    ; Set up counter for 16 bits
    mov isr, null                ; Clear ISR before starting input
bitloop:
    set pins, 0                 ; SCK Low
    out pins, 1    [1]         ; Output MOSI and wait
    set pins, 1                 ; SCK High
    in pins, 1     [1]         ; Sample MISO and wait
    jmp x-- bitloop            ; Loop for all 16 bits
    push                       ; Push ISR to FIFO when done
.wrap
"""

class PIOADCReader:
    def __init__(self, sck_pin, mosi_pin, miso_pin, cs_pin, frequency=800000):
        self.channel_configs = {
            0: 0b00000000,
            1: 0b00001000,
            2: 0b00010000,
            3: 0b00011000
        }
        self.cs = DigitalInOut(cs_pin)
        self.cs.direction = Direction.OUTPUT
        self.cs.value = True
        
        self.assembled = adafruit_pioasm.assemble(CONTINUOUS_SPI)
        
        self.sm = rp2pio.StateMachine(
            self.assembled,
            frequency=frequency*2,
            first_set_pin=sck_pin,
            set_pin_count=1,
            first_out_pin=mosi_pin,
            out_pin_count=1,
            first_in_pin=miso_pin,
            in_pin_count=1,
            auto_pull=True,
            pull_threshold=16,
            push_threshold=16,
            out_shift_right=False
        )
        
        self._tx_buffer = array.array('H', [0])
        self._rx_buffer = array.array('H', [0])
        
        # Pre-start with Ch1 to get correct pipeline order
        self.cs.value = False
        self._tx_buffer[0] = self.channel_configs[1] << 8
        self.sm.write(self._tx_buffer)
        self.cs.value = True
        time.sleep(0.000001)

    def process_value(self, raw):
        value = (raw >> 4) & 0xFF
        digital_value = sum(((value >> i) & 1) << (7-i) for i in range(8))
        voltage = (digital_value / 255.0) * 3.3
        return digital_value, voltage

    def read_all_channels(self):
        """Read all channels in sequence using pipelining."""
        results = [(0,0.0), (0,0.0), (0,0.0), (0,0.0)]
        channels = [(1,0), (2,1), (3,2), (0,3)]  # (config_channel, result_channel)

        for config_ch, result_ch in channels:
            self.cs.value = False
            next_ch = (config_ch + 1) % 4
            self._tx_buffer[0] = self.channel_configs[next_ch] << 8
            self.sm.write_readinto(self._tx_buffer, self._rx_buffer)
            self.cs.value = True
            time.sleep(0.000001)
            
            results[result_ch] = self.process_value(self._rx_buffer[0])

        return results

def main():
    adc = PIOADCReader(
        sck_pin=board.GP2,
        mosi_pin=board.GP3,
        miso_pin=board.GP4,
        cs_pin=board.GP5,
        frequency=800000
    )
    
    while True:
        results = adc.read_all_channels()
        for channel, (value, voltage) in enumerate(results):
            print(f"Channel {channel}: Raw: {value}, Voltage: {voltage:.3f}V")
        print("-" * 40)
        time.sleep(1)

if __name__ == "__main__":
    main()
